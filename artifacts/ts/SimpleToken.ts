/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as SimpleTokenContractJson } from "../SimpleToken.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace SimpleTokenTypes {
  export type Fields = {
    symbol: HexString;
    name: HexString;
    decimals: bigint;
    supply: bigint;
    balance: bigint;
    owner: Address;
  };

  export type State = ContractState<Fields>;

  export type WithdrawEvent = ContractEvent<{ amount: bigint }>;

  export interface CallMethodTable {
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDecimals: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    balance: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  SimpleTokenInstance,
  SimpleTokenTypes.Fields
> {
  consts = {
    ErrorCodes: { InvalidOwner: BigInt(0), InvalidWithdrawAmount: BigInt(1) },
  };

  at(address: string): SimpleTokenInstance {
    return new SimpleTokenInstance(address);
  }

  tests = {
    getSymbol: async (
      params: Omit<
        TestContractParams<SimpleTokenTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getSymbol", params);
    },
    getName: async (
      params: Omit<
        TestContractParams<SimpleTokenTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString>> => {
      return testMethod(this, "getName", params);
    },
    getDecimals: async (
      params: Omit<
        TestContractParams<SimpleTokenTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getDecimals", params);
    },
    getTotalSupply: async (
      params: Omit<
        TestContractParams<SimpleTokenTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getTotalSupply", params);
    },
    balance: async (
      params: Omit<
        TestContractParams<SimpleTokenTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "balance", params);
    },
    withdraw: async (
      params: TestContractParams<SimpleTokenTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "withdraw", params);
    },
  };
}

// Use this object to test and deploy the contract
export const SimpleToken = new Factory(
  Contract.fromJson(
    SimpleTokenContractJson,
    "",
    "baf828fcd7be3dca1f72793e385762d18e8de775dbaa4a1508e6c66b5ad2b4a0"
  )
);

// Use this class to interact with the blockchain
export class SimpleTokenInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<SimpleTokenTypes.State> {
    return fetchContractState(SimpleToken, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeWithdrawEvent(
    options: SubscribeOptions<SimpleTokenTypes.WithdrawEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      SimpleToken.contract,
      this,
      options,
      "Withdraw",
      fromCount
    );
  }

  methods = {
    getSymbol: async (
      params?: SimpleTokenTypes.CallMethodParams<"getSymbol">
    ): Promise<SimpleTokenTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        SimpleToken,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: SimpleTokenTypes.CallMethodParams<"getName">
    ): Promise<SimpleTokenTypes.CallMethodResult<"getName">> => {
      return callMethod(
        SimpleToken,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDecimals: async (
      params?: SimpleTokenTypes.CallMethodParams<"getDecimals">
    ): Promise<SimpleTokenTypes.CallMethodResult<"getDecimals">> => {
      return callMethod(
        SimpleToken,
        this,
        "getDecimals",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalSupply: async (
      params?: SimpleTokenTypes.CallMethodParams<"getTotalSupply">
    ): Promise<SimpleTokenTypes.CallMethodResult<"getTotalSupply">> => {
      return callMethod(
        SimpleToken,
        this,
        "getTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    balance: async (
      params?: SimpleTokenTypes.CallMethodParams<"balance">
    ): Promise<SimpleTokenTypes.CallMethodResult<"balance">> => {
      return callMethod(
        SimpleToken,
        this,
        "balance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends SimpleTokenTypes.MultiCallParams>(
    calls: Calls
  ): Promise<SimpleTokenTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      SimpleToken,
      this,
      calls,
      getContractByCodeHash
    )) as SimpleTokenTypes.MultiCallResults<Calls>;
  }
}
